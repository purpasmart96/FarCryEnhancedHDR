
#include "../CGVPMacro.csi"

NoFog
PS20Only

MainInput 
{
  uniform sampler2D baseMap : texunit0,
  uniform sampler2D bloomMap : texunit1,
  uniform sampler2D starMapRG : texunit2,
  uniform sampler2D starMapBA : texunit3,
  uniform sampler2D adaptedLumMap : texunit4,
  uniform float4 Params
}

DeclarationsScript
{
  struct vertout
  {
    OUT_T0
  };

  FOUT
}

CoreScript
{
  // The per-color weighting to be used for luminance calculations in RGB order.
  FLOAT3 LUMINANCE_VECTOR  = FLOAT3 (0.2125f, 0.7154f, 0.0721f);

  // The per-color weighting to be used for blue shift under low light.
  FLOAT3 BLUE_SHIFT_VECTOR = FLOAT3 (0.7f, 0.65f, 0.85f);

  FLOAT LUM_WHITE = 2.0f;

  FLOAT4 vSample = tex2D(baseMap, IN.Tex0.xy);
  FLOAT4 vBloom = tex2D(bloomMap, IN.Tex0.xy);
  FLOAT4 vStar;
  vStar.xy = tex2D(starMapRG, IN.Tex0.xy).xy;
  vStar.zw = tex2D(starMapBA, IN.Tex0.xy).xy;
  FLOAT fAdaptedLum = tex2D(adaptedLumMap, float2(0.5f, 0.5f));

# ifdef _HDR_FAKE
  fAdaptedLum = min(fAdaptedLum, 0.75f);
# endif

  FLOAT fStarScale = Params.x;
  FLOAT fBloomScale = Params.y;
  FLOAT fKeyValue = Params.w;

# ifdef _HDR_FAKE
  // For very low light conditions, the rods will dominate the perception
  // of light, and therefore color will be desaturated and shifted
  // towards blue.
  // Define a linear blending from -1.5 to 2.6 (log scale) which
  // determines the lerp amount for blue shift
  //float fBlueShiftCoefficient = 1.0 - (fAdaptedLum + 1.5)/4.0;
  FLOAT fBlueShiftCoefficient = 1.0 - (fAdaptedLum + 1.5)/2.0;
  fBlueShiftCoefficient = saturate(fBlueShiftCoefficient);

  // Lerp between current color and blue, desaturated copy
  FLOAT3 vRodColor = dot(vSample.xyz, LUMINANCE_VECTOR) * BLUE_SHIFT_VECTOR;
  vSample.rgb = lerp((float3)vSample, vRodColor, fBlueShiftCoefficient);
        
  // Map the high range of color values into a range appropriate for
  // display, taking into account the user's adaptation level, and selected
  // values for for middle gray and white cutoff.

  vSample.rgb *= 0.4/(fAdaptedLum + 0.001f);
  vSample.rgb *= (1.0f + vSample.rgb/LUM_WHITE);
  vSample.rgb /= 4;

  // Add the star and bloom post processing effects
  vSample += fStarScale * vStar;
  vSample += fBloomScale * vBloom;

# else

  FLOAT3 CRYSIS_BLUE_SHIFT_VECTOR = FLOAT3 (0.8f, 0.8f, 1.4f);
  //FLOAT fScreenCenter = dot(IN.Tex0.xy * 2.h - 1.h, IN.Tex0.xy * 2.h - 1.h);
  //FLOAT fVignetting = saturate(1.h - (fScreenCenter - 0.35h) * 0.5h);

  // Add the star and bloom post processing effects
  vStar += fStarScale * vStar;
  vBloom += fBloomScale * vBloom;

  // Only for Original Crysis Tone mapping
  //vSample.rgb += (vBloom + vStar);

  FLOAT eye_adaption = lerp(0.25f, fAdaptedLum, 0.5f); // good values: r_hdreyeadaptationbase=0.25, r_hdreyeadaptationfactor=0.5
  FLOAT fLum = dot(vSample.rgb, LUMINANCE_VECTOR);

  // Blueshift
  FLOAT fBlueShiftCoefficient = saturate(32.0f * fLum);
  vSample.rgb = lerp(fLum * CRYSIS_BLUE_SHIFT_VECTOR, vSample.rgb, fBlueShiftCoefficient);

  FLOAT fAdaptedLumDest = 5.f / (1.0f + 8.f * eye_adaption);
  //FLOAT fAdaptedLumDest  = 3.f / (max(0.1, 1 + 10 * eye_adaption));

  // Enable one of these if you are not using the Original Crysis Tone mapping, first line one includes vignetting
  //vSample.rgb = (fVignetting * (fAdaptedLumDest * vSample.rgb + vBloom + vStar));
  vSample.rgb = (fAdaptedLumDest * vSample.rgb + vBloom + vStar);

  // Original Crysis Tone mapping
  //vSample.rgb = 1 - exp( -fAdaptedLumDest * vSample.rgb);

  // Simple Exp tone mapping.
  vSample.rgb = 1.0 - exp(-vSample);

  // Simple reinhard tone mapping.
  //vSample.rgb = pow(vSample / ( 1.0 + vSample), 1.15);

  // Simplified ACES filmic tone mapping
  //vSample.rgb = saturate((vSample.rgb *(2.51f * vSample.rgb + 0.03f)) / (vSample.rgb * (2.43f * vSample.rgb + 0.59f) + 0.14f));

  // Gamma correction.. Its not going to look right since Everything is done in Linear
  //vSample.rgb = pow(vSample.rgb, 1.0f / 2.2f);

# endif

  OUT.Color = vSample;
}

